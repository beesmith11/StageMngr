{"version":3,"sources":["packager.js"],"names":["projectDir","race","stopAsync","resolve","reject","setTimeout","result","readPackagerInfoAsync","packagerPid","process","kill","exit","cleanUpPackager","installExitHooks","isInteractive","platform","require","createInterface","input","stdin","output","stdout","on","emit","withTimestamp","then","green","shouldIgnoreMsg","msg","indexOf","run","onReady","options","packagerReady","needsClear","logBuffer","progressBar","cwd","watchmanExists","sync","status","watcherDetails","toString","parseInt","split","trim","red","cyan","handleLogChunk","chunk","devEnabled","includes","deviceName","message","level","INFO","WARN","yellow","ERROR","packagerLogsStream","projectRoot","onStartBuildBundle","total","clear","complete","incomplete","setBundleProgressBar","onProgressBuildBundle","ticks","percent","curr","tick","onFinishBuildBundle","err","startTime","endTime","duration","updateLogs","newLogChunks","updater","forEach","map","attachLoggerStream","stream","write","tag","type","startAsync","reason","stack"],"mappings":";;;;;;;;;;;;;;;;;;;wEAiCA,iBAA+BA,UAA/B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuB,kBAAQC,IAAR,CAAa,CAChC,aAAQC,SAAR,CAAkBF,UAAlB,CADgC,EAEhC,sBAAY,UAACG,OAAD,EAAUC,MAAV;AAAA,qBAAqBC,WAAWF,OAAX,EAAoB,IAApB,EAA0B,YAA1B,CAArB;AAAA,aAAZ,CAFgC,CAAb,CADvB;;AAAA;AACQG,kBADR;;AAAA,kBAMMA,WAAW,YANjB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBASoC,qBAAgBC,qBAAhB,CAAsCP,UAAtC,CATpC;;AAAA;AAAA;AAScQ,uBATd,SAScA,WATd;;AAUMC,oBAAQC,IAAR,CAAaF,WAAb;AAVN;AAAA;;AAAA;AAAA;AAAA;;AAYMC,oBAAQE,IAAR,CAAa,CAAb;;AAZN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,e;;;;;AA/Bf;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,SAASC,gBAAT,CAA0Bb,UAA1B,EAAsCc,aAAtC,EAAqD;AACnD,MAAI,CAACA,aAAD,IAAkBL,QAAQM,QAAR,KAAqB,OAA3C,EAAoD;AAClDC,YAAQ,UAAR,EACGC,eADH,CACmB;AACfC,aAAOT,QAAQU,KADA;AAEfC,cAAQX,QAAQY;AAFD,KADnB,EAKGC,EALH,CAKM,QALN,EAKgB,YAAM;AAClBb,cAAQc,IAAR,CAAa,QAAb;AACD,KAPH;AAQD;;AAEDd,UAAQa,EAAR,CAAW,QAAX,EAAqB,YAAM;AACzB,kBAAIE,aAAJ,CAAkB,sBAAlB;AACAZ,oBAAgBZ,UAAhB,EAA4ByB,IAA5B,CAAiC,YAAM;AACrC;AACA,oBAAID,aAAJ,CAAkB,gBAAME,KAAN,CAAY,mBAAZ,CAAlB;AACAjB,cAAQE,IAAR;AACD,KAJD;AAKD,GAPD;AAQD;;AAmBD,SAASgB,eAAT,CAAyBC,GAAzB,EAA8B;AAC5B,SAAOA,IAAIC,OAAJ,CAAY,6BAAZ,KAA8C,CAA9C,IACLD,IAAIC,OAAJ,CAAY,oCAAZ,KAAqD,CADhD,IAELD,IAAIC,OAAJ,CAAY,mDAAZ,KAAoE,CAF/D,IAGLD,IAAIC,OAAJ,CAAY,yDAAZ,KAA0E,CAH5E;AAID;;AAED,SAASC,GAAT,CAAaC,OAAb,EAA+E;AAAA,MAA7CC,OAA6C,uEAA3B,EAA2B;AAAA,MAAvBlB,aAAuB,uEAAP,KAAO;;AAC7E,MAAImB,gBAAgB,KAApB;AACA,MAAIC,aAAa,KAAjB;AACA,MAAIC,YAAY,EAAhB;AACA,MAAIC,oBAAJ;AACA,MAAMpC,aAAaS,QAAQ4B,GAAR,EAAnB;;AAEA,MAAI5B,QAAQM,QAAR,KAAqB,OAAzB,EAAkC;AAChC,QAAMuB,iBAAiB,qBAAMC,IAAN,CAAW,OAAX,EAAoB,CAAC,UAAD,CAApB,EAAkCC,MAAlC,KAA6C,CAApE;;AAEA,QAAI/B,QAAQM,QAAR,KAAqB,QAArB,IAAiC,CAACuB,cAAtC,EAAsD;AACpD,UAAMG,iBAAiB,qBAAMF,IAAN,CAAW,QAAX,EAAqB,CAAC,eAAD,CAArB,EAAwClB,MAAxC,CAA+CqB,QAA/C,EAAvB;AACA,UAAIC,SAASF,eAAeG,KAAf,CAAqB,GAArB,EAA0B,CAA1B,EAA6BC,IAA7B,EAAT,IAAgD,OAApD,EAA6D;AAC3D,sBAAIrB,aAAJ,CACK,gBAAMsB,GAAN,0BADL,gHAGN,gBAAMC,IAAN,wFAHM;AAOAtC,gBAAQE,IAAR,CAAa,CAAb;AACD;AACF,KAZD,MAYO,IAAI,CAAC2B,cAAL,EAAqB;AAC1B,UAAMG,kBAAiB,qBACpBF,IADoB,CACf,QADe,EACL,CAAC,6BAAD,CADK,EAEpBlB,MAFoB,CAEbqB,QAFa,EAAvB;AAGA,UAAIC,SAASF,gBAAeG,KAAf,CAAqB,GAArB,EAA0B,CAA1B,EAA6BC,IAA7B,EAAT,IAAgD,KAApD,EAA2D;AACzD,sBAAIrB,aAAJ,CACK,gBAAMsB,GAAN,0BADL,gHAGN,gBAAMC,IAAN,2GAHM;AAMAtC,gBAAQE,IAAR,CAAa,CAAb;AACD;AACF;AACF;;AAED,MAAMqC,iBAAiB,SAAjBA,cAAiB,QAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,QAAIrB,gBAAgBsB,MAAMrB,GAAtB,CAAJ,EAAgC;AAC9B;AACD;;AAED;AACA,QAAIqB,MAAMrB,GAAN,CAAUC,OAAV,CAAkB,mBAAlB,KAA0C,CAA9C,EAAiD;AAC/C,UAAIK,UAAJ,EAAgB;AACd;AACA;AACD;AACD,UAAIgB,aAAaD,MAAMrB,GAAN,CAAUuB,QAAV,CAAmB,kBAAnB,CAAjB;AACA,oBAAI3B,aAAJ,qBACoByB,MAAMG,UAD1B,aAC2CF,aAAa,aAAb,GAA6B,YADxE;AAGA;AACD;;AAED,QAAID,MAAMrB,GAAN,KAAc,0BAAlB,EAA8C;AAC5CK,sBAAgB,IAAhB;AACAF;AACA;AACD;;AAED,QAAIE,aAAJ,EAAmB;AACjB,UAAMoB,UAAaJ,MAAMrB,GAAN,CAAUiB,IAAV,EAAb,OAAN;AACA,UAAII,MAAMK,KAAN,IAAe,iBAAOC,IAA1B,EAAgC;AAC9B,sBAAI/B,aAAJ,CAAkB6B,OAAlB;AACD,OAFD,MAEO,IAAIJ,MAAMK,KAAN,KAAgB,iBAAOE,IAA3B,EAAiC;AACtC,sBAAIhC,aAAJ,CAAkB,gBAAMiC,MAAN,CAAaJ,OAAb,CAAlB;AACD,OAFM,MAEA;AACL,sBAAI7B,aAAJ,CAAkB,gBAAMsB,GAAN,CAAUO,OAAV,CAAlB;;AAEA;AACAnB,qBAAamB,QAAQxB,OAAR,CAAgB,aAAhB,KAAkC,CAA/C;AACD;AACF,KAZD,MAYO;AACL,UAAIoB,MAAMK,KAAN,IAAe,iBAAOI,KAA1B,EAAiC;AAC/B,2BAAI,gBAAMD,MAAN,CAAa,+BAAb,CAAJ;AACA,2BAAItB,SAAJ;AACA,2BAAI,gBAAMW,GAAN,CAAUG,MAAMrB,GAAhB,CAAJ;AACAO,oBAAY,EAAZ;AACD,OALD,MAKO;AACLA,qBAAac,MAAMrB,GAAN,GAAY,IAAzB;AACD;AACF;AACF,GApDD;;AAsDA;AACA,MAAI+B,qBAAqB,4BAAuB;AAC9CC,iBAAa5D,UADiC;AAE9C6D,wBAAoB,8BAAM;AACxBzB,oBAAc,uBAAgB,4CAAhB,EAA8D;AAC1E0B,eAAO,GADmE;AAE1EC,eAAO,IAFmE;AAG1EC,kBAAU,GAHgE;AAI1EC,oBAAY;AAJ8D,OAA9D,CAAd;;AAOA,oBAAIC,oBAAJ,CAAyB9B,WAAzB;AACD,KAX6C;AAY9C+B,2BAAuB,wCAAW;AAChC,UAAI,CAAC/B,WAAD,IAAgBA,YAAY4B,QAAhC,EAA0C;AAC1C,UAAII,QAAQC,UAAUjC,YAAYkC,IAAlC;AACAF,cAAQ,CAAR,IAAahC,YAAYmC,IAAZ,CAAiBH,KAAjB,CAAb;AACD,KAhB6C;AAiB9CI,yBAAqB,6BAACC,GAAD,EAAMC,SAAN,EAAiBC,OAAjB,EAA6B;AAChD,UAAIvC,eAAe,CAACA,YAAY4B,QAAhC,EAA0C;AACxC5B,oBAAYmC,IAAZ,CAAiB,MAAMnC,YAAYkC,IAAnC;AACD;;AAED,UAAIlC,WAAJ,EAAiB;AACf,sBAAI8B,oBAAJ,CAAyB,IAAzB;AACA9B,sBAAc,IAAd;;AAEA,YAAIqC,GAAJ,EAAS;AACP,wBAAIjD,aAAJ,CAAkB,gBAAMsB,GAAN,qCAAlB;AACD,SAFD,MAEO;AACL,cAAI8B,WAAWD,UAAUD,SAAzB;AACA,wBAAIlD,aAAJ,CAAkB,gBAAME,KAAN,6CAAsDkD,QAAtD,QAAlB;AACD;AACF;AACF,KAjC6C;AAkC9CC,gBAAY,6BAAW;AACrB,UAAIC,eAAeC,QAAQ,EAAR,CAAnB;;AAEA,UAAI3C,WAAJ,EAAiB;AACf;AACA;AACA0C,qBAAaE,OAAb,CAAqB,iBAAS;AAC5B,cAAI/B,MAAMrB,GAAN,KAAc,qBAAlB,EAAyC;AACvCQ,wBAAYmC,IAAZ,CAAiB,MAAMnC,YAAYkC,IAAnC;AACA,0BAAIJ,oBAAJ,CAAyB,IAAzB;AACA9B,0BAAc,IAAd;AACA,0BAAIZ,aAAJ,CAAkB,gBAAMsB,GAAN,CAAU,mCAAV,CAAlB;AACD;AACF,SAPD;AAQD;;AAEDgC,mBAAaG,GAAb,CAAiBjC,cAAjB;AACD;AAnD6C,GAAvB,CAAzB;;AAsDA;AACA,oBAAakC,kBAAb,CAAgClF,UAAhC,EAA4C;AAC1CmF,YAAQ;AACNC,aAAO,sBAAS;AACd,YAAInC,MAAMoC,GAAN,KAAc,QAAlB,EAA4B;AAC1BrC,yBAAeC,KAAf;AACD;AACF;AALK,KADkC;AAQ1CqC,UAAM;AARoC,GAA5C;;AAWAzE,mBAAiBb,UAAjB,EAA6Bc,aAA7B;AACA,gBAAIU,aAAJ,CAAkB,sBAAlB;;AAEA,eAAQ+D,UAAR,CAAmBvF,UAAnB,EAA+BgC,OAA/B,EAAwCP,IAAxC,CACE,YAAM,CAAE,CADV,EAEE,kBAAU;AACR,kBAAID,aAAJ,CAAkB,gBAAMsB,GAAN,+BAAsC0C,OAAOC,KAA7C,CAAlB;AACAhF,YAAQE,IAAR,CAAa,CAAb;AACD,GALH;AAOD;;kBAEc,EAAEmB,QAAF,E","file":"packager.js","sourcesContent":["// @flow\n\nimport { PackagerLogsStream, Project, ProjectSettings, ProjectUtils } from 'xdl';\n\nimport spawn from 'cross-spawn';\nimport ProgressBar from 'progress';\nimport bunyan from '@expo/bunyan';\nimport chalk from 'chalk';\n\nimport log from './log';\n\nfunction installExitHooks(projectDir, isInteractive) {\n  if (!isInteractive && process.platform === 'win32') {\n    require('readline')\n      .createInterface({\n        input: process.stdin,\n        output: process.stdout,\n      })\n      .on('SIGINT', () => {\n        process.emit('SIGINT');\n      });\n  }\n\n  process.on('SIGINT', () => {\n    log.withTimestamp('Stopping packager...');\n    cleanUpPackager(projectDir).then(() => {\n      // TODO: this shows up after process exits, fix it\n      log.withTimestamp(chalk.green('Packager stopped.'));\n      process.exit();\n    });\n  });\n}\n\nasync function cleanUpPackager(projectDir) {\n  const result = await Promise.race([\n    Project.stopAsync(projectDir),\n    new Promise((resolve, reject) => setTimeout(resolve, 1000, 'stopFailed')),\n  ]);\n\n  if (result === 'stopFailed') {\n    // find RN packager pid, attempt to kill manually\n    try {\n      const { packagerPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n      process.kill(packagerPid);\n    } catch (e) {\n      process.exit(1);\n    }\n  }\n}\n\nfunction shouldIgnoreMsg(msg) {\n  return msg.indexOf('Duplicate module name: bser') >= 0 ||\n    msg.indexOf('Duplicate module name: fb-watchman') >= 0 ||\n    msg.indexOf('Warning: React.createClass is no longer supported') >= 0 ||\n    msg.indexOf('Warning: PropTypes has been moved to a separate package') >= 0;\n}\n\nfunction run(onReady: () => ?any, options: Object = {}, isInteractive = false) {\n  let packagerReady = false;\n  let needsClear = false;\n  let logBuffer = '';\n  let progressBar;\n  const projectDir = process.cwd();\n\n  if (process.platform !== 'win32') {\n    const watchmanExists = spawn.sync('which', ['watchman']).status === 0;\n\n    if (process.platform === 'darwin' && !watchmanExists) {\n      const watcherDetails = spawn.sync('sysctl', ['kern.maxfiles']).stdout.toString();\n      if (parseInt(watcherDetails.split(':')[1].trim()) < 5242880) {\n        log.withTimestamp(\n          `${chalk.red(`Unable to start server`)}\nSee https://git.io/v5vcn for more information, either install watchman or run the following snippet:\n${chalk.cyan(`  sudo sysctl -w kern.maxfiles=5242880\n  sudo sysctl -w kern.maxfilesperproc=524288`)}\n        `\n        );\n        process.exit(1);\n      }\n    } else if (!watchmanExists) {\n      const watcherDetails = spawn\n        .sync('sysctl', ['fs.inotify.max_user_watches'])\n        .stdout.toString();\n      if (parseInt(watcherDetails.split('=')[1].trim()) < 12288) {\n        log.withTimestamp(\n          `${chalk.red(`Unable to start server`)}\nSee https://git.io/v5vcn for more information, either install watchman or run the following snippet:\n${chalk.cyan(`  sudo sysctl -w fs.inotify.max_user_instances=1024\n  sudo sysctl -w fs.inotify.max_user_watches=12288`)}`\n        );\n        process.exit(1);\n      }\n    }\n  }\n\n  const handleLogChunk = chunk => {\n    // pig, meet lipstick\n    // 1. https://github.com/facebook/react-native/issues/14620\n    // 2. https://github.com/facebook/react-native/issues/14610\n    // 3. https://github.com/react-community/create-react-native-app/issues/229#issuecomment-308654303\n    // @ide is investigating 3), the first two are upstream issues that will\n    // likely be resolved by others\n    if (shouldIgnoreMsg(chunk.msg)) {\n      return;\n    }\n\n    // we don't need to print the entire manifest when loading the app\n    if (chunk.msg.indexOf(' with appParams: ') >= 0) {\n      if (needsClear) {\n        // this is set when we previously encountered an error\n        // TODO clearConsole();\n      }\n      let devEnabled = chunk.msg.includes('__DEV__ === true');\n      log.withTimestamp(\n        `Running app on ${chunk.deviceName} in ${devEnabled ? 'development' : 'production'} mode\\n`\n      );\n      return;\n    }\n\n    if (chunk.msg === 'Dependency graph loaded.') {\n      packagerReady = true;\n      onReady();\n      return;\n    }\n\n    if (packagerReady) {\n      const message = `${chunk.msg.trim()}\\n`;\n      if (chunk.level <= bunyan.INFO) {\n        log.withTimestamp(message);\n      } else if (chunk.level === bunyan.WARN) {\n        log.withTimestamp(chalk.yellow(message));\n      } else {\n        log.withTimestamp(chalk.red(message));\n\n        // if you run into a syntax error then we should clear log output on reload\n        needsClear = message.indexOf('SyntaxError') >= 0;\n      }\n    } else {\n      if (chunk.level >= bunyan.ERROR) {\n        log(chalk.yellow('***ERROR STARTING PACKAGER***'));\n        log(logBuffer);\n        log(chalk.red(chunk.msg));\n        logBuffer = '';\n      } else {\n        logBuffer += chunk.msg + '\\n';\n      }\n    }\n  };\n\n  // Subscribe to packager/server logs\n  let packagerLogsStream = new PackagerLogsStream({\n    projectRoot: projectDir,\n    onStartBuildBundle: () => {\n      progressBar = new ProgressBar('Building JavaScript bundle [:bar] :percent', {\n        total: 100,\n        clear: true,\n        complete: '=',\n        incomplete: ' ',\n      });\n\n      log.setBundleProgressBar(progressBar);\n    },\n    onProgressBuildBundle: percent => {\n      if (!progressBar || progressBar.complete) return;\n      let ticks = percent - progressBar.curr;\n      ticks > 0 && progressBar.tick(ticks);\n    },\n    onFinishBuildBundle: (err, startTime, endTime) => {\n      if (progressBar && !progressBar.complete) {\n        progressBar.tick(100 - progressBar.curr);\n      }\n\n      if (progressBar) {\n        log.setBundleProgressBar(null);\n        progressBar = null;\n\n        if (err) {\n          log.withTimestamp(chalk.red(`Failed building JavaScript bundle`));\n        } else {\n          let duration = endTime - startTime;\n          log.withTimestamp(chalk.green(`Finished building JavaScript bundle in ${duration}ms`));\n        }\n      }\n    },\n    updateLogs: updater => {\n      let newLogChunks = updater([]);\n\n      if (progressBar) {\n        // Restarting watchman causes `onFinishBuildBundle` to not fire. Until\n        // this is handled upstream in xdl, reset progress bar with error here.\n        newLogChunks.forEach(chunk => {\n          if (chunk.msg === 'Restarted watchman.') {\n            progressBar.tick(100 - progressBar.curr);\n            log.setBundleProgressBar(null);\n            progressBar = null;\n            log.withTimestamp(chalk.red('Failed building JavaScript bundle'));\n          }\n        });\n      }\n\n      newLogChunks.map(handleLogChunk);\n    },\n  });\n\n  // Subscribe to device updates separately from packager/server updates\n  ProjectUtils.attachLoggerStream(projectDir, {\n    stream: {\n      write: chunk => {\n        if (chunk.tag === 'device') {\n          handleLogChunk(chunk);\n        }\n      },\n    },\n    type: 'raw',\n  });\n\n  installExitHooks(projectDir, isInteractive);\n  log.withTimestamp('Starting packager...');\n\n  Project.startAsync(projectDir, options).then(\n    () => {},\n    reason => {\n      log.withTimestamp(chalk.red(`Error starting packager: ${reason.stack}`));\n      process.exit(1);\n    }\n  );\n}\n\nexport default { run };\n"]}