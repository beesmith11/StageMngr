{"version":3,"sources":["eject.js"],"names":["filesUsingExpoSdk","filesWithExpo","usingExpo","length","expoSdkWarning","bold","filename","cyan","yellow","italic","reactNativeOptionMessage","questions","type","name","message","default","choices","value","prompt","ejectMethod","exists","resolve","useYarn","npmOrYarn","JSON","readFile","appJson","parse","pkgJson","newName","newDisplayName","displayName","expName","expo","stripDashes","validate","s","indexOf","enteredName","enteredDisplayname","writeFile","green","ejectCommand","ejectArgs","sync","stdio","status","red","process","exit","newDevDependencies","projectBabelPath","projectBabelRc","toString","babelRcJson","presets","includes","map","preset","push","main","dependencies","devDependencies","scripts","start","ios","android","eject","lolThatsSomeComplexCode","args","stdin","stderr","console","error","findJavaScriptProjectFilesInRoot","cwd","projectJsFiles","all","f","buf","i","contents","jsFileContents","filesUsingExpo","requires","findAll","sort","root","stat","stats","isFile","endsWith","isDirectory","readdir","children","join","jsFilesInChildren","concat","apply","ret","c","then","catch","e"],"mappings":"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","file":"eject.js","sourcesContent":["// @flow\n\nimport chalk from 'chalk';\nimport fse from 'fs-extra';\nimport inquirer from 'inquirer';\nimport matchRequire from 'match-require';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport spawn from 'cross-spawn';\nimport log from '../util/log';\n\nimport { detach } from '../util/expo';\n\nasync function eject() {\n  try {\n    const filesWithExpo = await filesUsingExpoSdk();\n    const usingExpo = filesWithExpo.length > 0;\n\n    let expoSdkWarning;\n    if (usingExpo) {\n      expoSdkWarning = `${chalk.bold('Warning!')} We found at least one file where your project imports the Expo SDK:\n`;\n\n      for (let filename of filesWithExpo) {\n        expoSdkWarning += `  ${chalk.cyan(filename)}\\n`;\n      }\n\n      expoSdkWarning += `\n${chalk.yellow.bold('If you choose the \"plain\" React Native option below, these imports will stop working.')}`;\n    } else {\n      expoSdkWarning = `\\\nWe didn't find any uses of the Expo SDK in your project, so you should be fine to eject to\n\"Plain\" React Native. (This check isn't very sophisticated, though.)`;\n    }\n\n    log(\n      `\n${expoSdkWarning}\n\nWe ${chalk.italic('strongly')} recommend that you read this document before you proceed:\n  ${chalk.cyan('https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md')}\n\nEjecting is permanent! Please be careful with your selection.\n`\n    );\n\n    let reactNativeOptionMessage = \"React Native: I'd like a regular React Native project.\";\n\n    if (usingExpo) {\n      reactNativeOptionMessage = chalk.italic(\n        \"(WARNING: See above message for why this option may break your project's build)\\n  \"\n      ) + reactNativeOptionMessage;\n    }\n\n    const questions = [\n      {\n        type: 'list',\n        name: 'ejectMethod',\n        message: 'How would you like to eject from create-react-native-app?',\n        default: usingExpo ? 'expoKit' : 'raw',\n        choices: [\n          {\n            name: reactNativeOptionMessage,\n            value: 'raw',\n          },\n          {\n            name: \"ExpoKit: I'll create or log in with an Expo account to use React Native and the Expo SDK.\",\n            value: 'expoKit',\n          },\n          {\n            name: \"Cancel: I'll continue with my current project structure.\",\n            value: 'cancel',\n          },\n        ],\n      },\n    ];\n\n    const { ejectMethod } = await inquirer.prompt(questions);\n\n    if (ejectMethod === 'raw') {\n      const useYarn = await fse.exists(path.resolve('yarn.lock'));\n      const npmOrYarn = useYarn ? 'yarn' : 'npm';\n      const appJson = JSON.parse(await fse.readFile(path.resolve('app.json')));\n      const pkgJson = JSON.parse(\n        await fse.readFile(path.resolve('package.json'))\n      );\n      let {\n        name: newName,\n        displayName: newDisplayName,\n        expo: { name: expName },\n      } = appJson;\n\n      // we ask user to provide a project name (default is package name stripped of dashes)\n      // but we want to infer some good default choices, especially if they've set them up in app.json\n      if (!newName) {\n        newName = stripDashes(pkgJson.name);\n      }\n\n      if (!newDisplayName && expName) {\n        newDisplayName = expName;\n      }\n\n      log(\n        \"We have a couple of questions to ask you about how you'd like to name your app:\"\n      );\n      const { enteredName, enteredDisplayname } = await inquirer.prompt([\n        {\n          name: 'enteredDisplayname',\n          message: \"What should your app appear as on a user's home screen?\",\n          default: newDisplayName,\n          validate: s => {\n            return s.length > 0;\n          },\n        },\n        {\n          name: 'enteredName',\n          message: 'What should your Android Studio and Xcode projects be called?',\n          default: newName,\n          validate: s => {\n            return s.length > 0 &&\n              s.indexOf('-') === -1 &&\n              s.indexOf(' ') === -1;\n          },\n        },\n      ]);\n\n      appJson.name = enteredName;\n      appJson.displayName = enteredDisplayname;\n\n      log('Writing your selections to app.json...');\n      // write the updated app.json file\n      await fse.writeFile(\n        path.resolve('app.json'),\n        JSON.stringify(appJson, null, 2)\n      );\n      log(\n        chalk.green(\n          'Wrote to app.json, please update it manually in the future.'\n        )\n      );\n\n      const ejectCommand = 'node';\n      const ejectArgs = [\n        path.resolve('node_modules', 'react-native', 'local-cli', 'cli.js'),\n        'eject',\n      ];\n\n      const { status } = spawn.sync(ejectCommand, ejectArgs, {\n        stdio: 'inherit',\n      });\n\n      if (status !== 0) {\n        log(\n          chalk.red(\n            `Eject failed with exit code ${status}, see above output for any issues.`\n          )\n        );\n        log(\n          chalk.yellow(\n            'You may want to delete the `ios` and/or `android` directories.'\n          )\n        );\n        process.exit(1);\n      } else {\n        log('Successfully copied template native code.');\n      }\n\n      const newDevDependencies = [];\n      // Try to replace the Babel preset.\n      try {\n        const projectBabelPath = path.resolve('.babelrc');\n        // If .babelrc doesn't exist, the app is using the default config and\n        // editing the config is not necessary.\n        if (await fse.exists(projectBabelPath)) {\n          const projectBabelRc = (await fse.readFile(\n            projectBabelPath\n          )).toString();\n\n          // We assume the .babelrc is valid JSON. If we can't parse it (e.g. if\n          // it's JSON5) the error is caught and a message asking to change it\n          // manually gets printed.\n          const babelRcJson = JSON.parse(projectBabelRc);\n          if (\n            babelRcJson.presets &&\n            babelRcJson.presets.includes('babel-preset-expo')\n          ) {\n            babelRcJson.presets = babelRcJson.presets.map(\n              preset =>\n                preset === 'babel-preset-expo'\n                  ? 'babel-preset-react-native-stage-0/decorator-support'\n                  : preset\n            );\n            await fse.writeFile(\n              projectBabelPath,\n              JSON.stringify(babelRcJson, null, 2)\n            );\n            newDevDependencies.push('babel-preset-react-native-stage-0');\n            log(\n              chalk.green(\n                `Babel preset changed to \\`babel-preset-react-native-stage-0/decorator-support\\`.`\n              )\n            );\n          }\n        }\n      } catch (e) {\n        log(\n          chalk.yellow(\n            `We had an issue preparing your .babelrc for ejection.\nIf you have a .babelrc in your project, make sure to change the preset\nfrom \\`babel-preset-expo\\` to \\`babel-preset-react-native-stage-0/decorator-support\\`.`\n          )\n        );\n        log(chalk.red(e));\n      }\n\n      delete pkgJson.main;\n\n      // NOTE: expo won't work after performing a raw eject, so we should delete this\n      // it will be a better error message for the module to not be found than for whatever problems\n      // missing native modules will cause\n      delete pkgJson.dependencies.expo;\n      delete pkgJson.devDependencies['react-native-scripts'];\n\n      pkgJson.scripts.start = 'react-native start';\n      pkgJson.scripts.ios = 'react-native run-ios';\n      pkgJson.scripts.android = 'react-native run-android';\n\n      // no longer relevant to an ejected project (maybe build is?)\n      delete pkgJson.scripts.eject;\n\n      log(`Updating your ${npmOrYarn} scripts in package.json...`);\n\n      await fse.writeFile(\n        path.resolve('package.json'),\n        JSON.stringify(pkgJson, null, 2)\n      );\n\n      log(chalk.green('Your package.json is up to date!'));\n\n      // FIXME now we need to provide platform-specific entry points until upstream uses a single one\n      log(`Adding platform-specific entry points...`);\n\n      const lolThatsSomeComplexCode = `import { AppRegistry } from 'react-native';\nimport App from './App';\nAppRegistry.registerComponent('${newName}', () => App);\n`;\n\n      await fse.writeFile(\n        path.resolve('index.ios.js'),\n        lolThatsSomeComplexCode\n      );\n      await fse.writeFile(\n        path.resolve('index.android.js'),\n        lolThatsSomeComplexCode\n      );\n\n      log(chalk.green('Added new entry points!'));\n\n      log(\n        `\nNote that using \\`${npmOrYarn} start\\` will now require you to run Xcode and/or\nAndroid Studio to build the native code for your project.`\n      );\n\n      log('Removing node_modules...');\n      rimraf.sync(path.resolve('node_modules'));\n      if (useYarn) {\n        log('Installing packages with yarn...');\n        const args = newDevDependencies.length > 0\n          ? ['add', '--dev', ...newDevDependencies]\n          : [];\n        spawn.sync('yarnpkg', args, { stdio: 'inherit' });\n      } else {\n        // npm prints the whole package tree to stdout unless we ignore it.\n        const stdio = [process.stdin, 'ignore', process.stderr];\n\n        log('Installing existing packages with npm...');\n        spawn.sync('npm', ['install'], { stdio });\n\n        if (newDevDependencies.length > 0) {\n          log('Installing new packages with npm...');\n          spawn.sync('npm', ['install', '--save-dev', ...newDevDependencies], {\n            stdio,\n          });\n        }\n      }\n    } else if (ejectMethod === 'expoKit') {\n      await detach();\n    } else {\n      // we don't want to print the survey for cancellations\n      log('OK! If you change your mind you can run this command again.');\n      return;\n    }\n\n    log(\n      `${chalk.green('Ejected successfully!')}\nPlease consider letting us know why you ejected in this survey:\n  ${chalk.cyan('https://goo.gl/forms/iD6pl218r7fn9N0d2')}`\n    );\n  } catch (e) {\n    console.error(chalk.red(`Error running eject: ${e}`));\n  }\n}\n\nasync function filesUsingExpoSdk(): Promise<Array<string>> {\n  const projectJsFiles = await findJavaScriptProjectFilesInRoot(process.cwd());\n\n  const jsFileContents = (await Promise.all(\n    projectJsFiles.map(f => fse.readFile(f))\n  )).map((buf, i) => {\n    return {\n      filename: projectJsFiles[i],\n      contents: buf.toString(),\n    };\n  });\n\n  const filesUsingExpo = [];\n\n  for (let { filename, contents } of jsFileContents) {\n    const requires = matchRequire.findAll(contents);\n\n    if (requires.includes('expo')) {\n      filesUsingExpo.push(filename);\n    }\n  }\n\n  filesUsingExpo.sort();\n\n  return filesUsingExpo;\n}\n\nfunction stripDashes(s: string): string {\n  let ret = '';\n\n  for (let c of s) {\n    if (c !== ' ' && c !== '-') {\n      ret += c;\n    }\n  }\n\n  return ret;\n}\n\nasync function findJavaScriptProjectFilesInRoot(\n  root: string\n): Promise<Array<string>> {\n  // ignore node_modules\n  if (root.includes('node_modules')) {\n    return [];\n  }\n\n  const stats = await fse.stat(root);\n\n  if (stats.isFile()) {\n    if (root.endsWith('.js')) {\n      return [root];\n    } else {\n      return [];\n    }\n  } else if (stats.isDirectory()) {\n    const children = await fse.readdir(root);\n\n    // we want to do this concurrently in large project folders\n    const jsFilesInChildren = await Promise.all(\n      children.map(f => findJavaScriptProjectFilesInRoot(path.join(root, f)))\n    );\n\n    return [].concat.apply([], jsFilesInChildren);\n  } else {\n    // lol it's not a file or directory, we can't return a honey badger, 'cause it don't give a\n    return [];\n  }\n}\n\neject()\n  .then(() => {\n    // the expo local github auth server leaves a setTimeout for 5 minutes\n    // so we need to explicitly exit (for now, this will be resolved in the nearish future)\n    process.exit(0);\n  })\n  .catch(e => {\n    console.error(`Problem running eject: ${e}`);\n    process.exit(1);\n  });\n"]}