{"version":3,"sources":["detach/ExponentTools.js"],"names":["async","url","headers","let","requestOptions","replace","response","await","request","promise","responseBody","body","console","log","manifest","JSON","parse","getManifestAsync","args","length","spawnAsyncQuiet","stdio","cwd","process","spawnAsyncThrowError","e","error","message","spawnAsync","filename","transform","fileString","fs","readFile","newFileString","writeFile","transformFileContentsAsync","plistPath","plistName","emptyConfig","tmpConfigFile","path","join","stringify","plistFilename","getNormalizedPlistFilename","configPlistName","createBlankIOSPropertyListAsync","configFilename","configContents","config","modifyIOSPropertyListAsync","restoreOriginal","cleanIOSPropertyListBackupAsync","dirname","basename","platform","warn","childProcess","dimensions","components","stdout","split","map","c","parseInt","filter","n","isNaN","_","getImageDimensionsAsync","projectRoot","srcRoot","loading","splash","splashXibFilename","splashOutputFilename","parser","serializer","dom","parseFromString","setBackgroundColor","serializeToString","setBackgroundImage","configureIOSLaunchAssetsAsync","backgroundImageOutputPath","backgroundImageUrl","image","ios","saveImageToPathAsync","destinationIconPath","defaultIconFilename","iconUrl","saveUrlToPathAsync","icon","iconSizes","forEach","iconSize","iconResolutions","iconResolution","iconQualifier","getAppleIconQualifier","iconKey","rawIconFilename","usesDefault","hasOwnProperty","iconFilename","iconSizePx","dims","Error","configureIOSIconsAsync","parseSdkMajorVersion","expSdkVersion","sdkMajorVersion","versionComponents","number","Promise","resolve","reject","stream","createWriteStream","on","getFilesizeInBytes","pipe","pathOrURL","outPath","localPath","existsSync","createReadStream","stats","statSync","fileSizeInBytes","indexOf","backgroundColorFromHexString","hexColor","result","exec","r","g","b","backgroundViewID","backgroundColorString","backgroundColor","backgroundViewNode","getElementById","backgroundViewColorNodes","getElementsByTagName","backgroundColorNode","i","node","parentNode","getAttribute","setAttribute"],"mappings":"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","file":"../../detach/ExponentTools.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\nimport request from 'request';\nimport spawnAsyncQuiet from '@expo/spawn-async';\nimport { DOMParser, XMLSerializer } from 'xmldom';\n\nfunction parseSdkMajorVersion(expSdkVersion) {\n  let sdkMajorVersion = 0;\n  try {\n    let versionComponents = expSdkVersion\n      .split('.')\n      .map(number => parseInt(number, 10));\n    sdkMajorVersion = versionComponents[0];\n  } catch (_) {}\n  return sdkMajorVersion;\n}\n\nfunction saveUrlToPathAsync(url, path) {\n  return new Promise(function(resolve, reject) {\n    let stream = fs.createWriteStream(path);\n    stream.on('close', () => {\n      if (getFilesizeInBytes(path) < 10) {\n        throw new Error(`{filename} is too small`);\n      }\n      resolve();\n    });\n    stream.on('error', reject);\n    request(url).pipe(stream);\n  });\n}\n\nfunction saveImageToPathAsync(projectRoot, pathOrURL, outPath) {\n  const localPath = path.resolve(projectRoot, pathOrURL);\n  return new Promise(function(resolve, reject) {\n    let stream = fs.createWriteStream(outPath);\n    stream.on('close', () => {\n      if (getFilesizeInBytes(outPath) < 10) {\n        throw new Error(`{filename} is too small`);\n      }\n      resolve();\n    });\n    stream.on('error', reject);\n    if (fs.existsSync(localPath)) {\n      fs.createReadStream(localPath).pipe(stream);\n    } else {\n      request(pathOrURL).pipe(stream);\n    }\n  });\n}\n\nfunction getFilesizeInBytes(path) {\n  let stats = fs.statSync(path);\n  let fileSizeInBytes = stats['size'];\n  return fileSizeInBytes;\n}\n\nasync function getManifestAsync(url, headers) {\n  let requestOptions = {\n    url: url.replace('exp://', 'http://') + '/index.exp',\n    headers,\n  };\n\n  let response = await request.promise(requestOptions);\n  let responseBody = response.body;\n  console.log('Using manifest:', responseBody);\n  let manifest = JSON.parse(responseBody);\n\n  return manifest;\n}\n\nasync function spawnAsyncThrowError(...args) {\n  if (args.length === 2) {\n    return spawnAsyncQuiet(args[0], args[1], {\n      stdio: 'inherit',\n      cwd: process.cwd(),\n    });\n  } else {\n    return spawnAsyncQuiet(...args);\n  }\n}\n\nasync function spawnAsync(...args) {\n  try {\n    return await spawnAsyncThrowError(...args);\n  } catch (e) {\n    console.error(e.message);\n  }\n}\n\nasync function transformFileContentsAsync(filename, transform) {\n  let fileString = await fs.promise.readFile(filename, 'utf8');\n  let newFileString = transform(fileString);\n  if (newFileString !== null) {\n    await fs.promise.writeFile(filename, newFileString);\n  }\n  return;\n}\n\nfunction getNormalizedPlistFilename(plistName) {\n  let plistFilename;\n  if (plistName.indexOf('.') !== -1) {\n    plistFilename = plistName;\n  } else {\n    plistFilename = `${plistName}.plist`;\n  }\n  return plistFilename;\n}\n\nasync function createBlankIOSPropertyListAsync(plistPath, plistName) {\n  // write empty json file\n  const emptyConfig = {};\n  const tmpConfigFile = path.join(plistPath, `${plistName}.json`);\n  await fs.promise.writeFile(tmpConfigFile, JSON.stringify(emptyConfig));\n\n  // convert to plist\n  let plistFilename = getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  await spawnAsyncThrowError('plutil', [\n    '-convert',\n    'xml1',\n    tmpConfigFile,\n    '-o',\n    configPlistName,\n  ]);\n\n  // remove tmp json file\n  await spawnAsyncThrowError('/bin/rm', [tmpConfigFile]);\n  return;\n}\n\n/**\n *  @param plistName base filename of property list. if no extension, assumes .plist\n */\nasync function modifyIOSPropertyListAsync(plistPath, plistName, transform) {\n  let plistFilename = getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  let configFilename = path.join(plistPath, `${plistName}.json`);\n\n  // grab original plist as json object\n  await spawnAsyncThrowError('plutil', [\n    '-convert',\n    'json',\n    configPlistName,\n    '-o',\n    configFilename,\n  ]);\n  let configContents = await fs.promise.readFile(configFilename, 'utf8');\n  let config;\n\n  try {\n    config = JSON.parse(configContents);\n  } catch (e) {\n    console.log(`Error parsing ${configFilename}`, e);\n    console.log('The erroneous file contents was:', configContents);\n    config = {};\n  }\n\n  // apply transformation\n  config = transform(config);\n\n  // back up old plist and swap in modified one\n  await spawnAsyncThrowError('/bin/cp', [\n    configPlistName,\n    `${configPlistName}.bak`,\n  ]);\n  await fs.promise.writeFile(configFilename, JSON.stringify(config));\n  await spawnAsyncThrowError('plutil', [\n    '-convert',\n    'xml1',\n    configFilename,\n    '-o',\n    configPlistName,\n  ]);\n  return config;\n}\n\nasync function cleanIOSPropertyListBackupAsync(\n  plistPath,\n  plistName,\n  restoreOriginal = true\n) {\n  let plistFilename = getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  let configFilename = path.join(plistPath, `${plistName}.json`);\n\n  if (restoreOriginal) {\n    await spawnAsyncThrowError('/bin/cp', [\n      `${configPlistName}.bak`,\n      configPlistName,\n    ]);\n  }\n\n  await spawnAsyncThrowError('/bin/rm', [`${configPlistName}.bak`]);\n  await spawnAsyncThrowError('/bin/rm', [configFilename]);\n  return;\n}\n\nfunction getAppleIconQualifier(iconSize, iconResolution) {\n  let iconQualifier;\n  if (iconResolution !== 1) {\n    // e.g. \"29x29@3x\"\n    iconQualifier = `${iconSize}x${iconSize}@${iconResolution}x`;\n  } else {\n    iconQualifier = `${iconSize}x${iconSize}`;\n  }\n  if (iconSize === 76 || iconSize === 83.5) {\n    // ipad sizes require ~ipad at the end\n    iconQualifier = `${iconQualifier}~ipad`;\n  }\n  return iconQualifier;\n}\n\n/**\n *  @return array [ width, height ] or nil if that fails for some reason.\n */\nasync function getImageDimensionsAsync(dirname, basename) {\n  if (process.platform !== 'darwin') {\n    console.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let childProcess = await spawnAsyncThrowError(\n    'sips',\n    ['-g', 'pixelWidth', '-g', 'pixelHeight', basename],\n    {\n      cwd: dirname,\n    }\n  );\n  let dimensions;\n  try {\n    // stdout looks something like 'pixelWidth: 1200\\n pixelHeight: 800'\n    const components = childProcess.stdout.split(/(\\s+)/);\n    dimensions = components.map(c => parseInt(c, 10)).filter(n => !isNaN(n));\n  } catch (_) {}\n  return dimensions;\n}\n\nfunction backgroundColorFromHexString(hexColor) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hexColor);\n  if (result.length < 4) {\n    // Default to white if we can't parse the color. We should have 3 matches.\n    console.warn('Unable to parse color: ', hexColor, ' result:', result);\n    return { r: 1, g: 1, b: 1 };\n  }\n\n  var r = parseInt(result[1], 16) / 255;\n  var g = parseInt(result[2], 16) / 255;\n  var b = parseInt(result[3], 16) / 255;\n  return { r, g, b };\n}\n\nasync function configureIOSLaunchAssetsAsync(manifest, projectRoot, srcRoot) {\n  if (!(manifest.loading && manifest.loading.splash)) {\n    // Don't do loading xib customizations if `loading.splash` key doesn't exist\n    return;\n  }\n\n  console.log('Configuring iOS Launch Screen');\n  let splashXibFilename = path.join(\n    srcRoot,\n    'Exponent',\n    'Base.lproj',\n    'LaunchScreenShell.xib'\n  );\n  let splashOutputFilename = path.join(\n    projectRoot,\n    'Base.lproj',\n    'LaunchScreenShell.nib'\n  );\n\n  await transformFileContentsAsync(splashXibFilename, fileString => {\n    var parser = new DOMParser();\n    var serializer = new XMLSerializer();\n    var dom = parser.parseFromString(fileString);\n\n    setBackgroundColor(manifest, dom);\n\n    var fileString = serializer.serializeToString(dom);\n    return fileString;\n  });\n\n  await setBackgroundImage(manifest, projectRoot);\n\n  await spawnAsyncThrowError('ibtool', [\n    '--compile',\n    splashOutputFilename,\n    splashXibFilename,\n  ]);\n\n  console.log('DONE Configuring iOS Launch Screen');\n}\n\nasync function setBackgroundImage(manifest, projectRoot) {\n  var backgroundImageOutputPath = path.join(\n    projectRoot,\n    'launch_background_image.png'\n  );\n\n  var backgroundImageUrl;\n  if (\n    manifest.loading &&\n    manifest.loading.splash &&\n    manifest.loading.splash.image &&\n    manifest.loading.splash.image.ios &&\n    manifest.loading.splash.image.ios.backgroundImageUrl\n  ) {\n    backgroundImageUrl = manifest.loading.splash.image.ios.backgroundImageUrl;\n  }\n\n  if (!backgroundImageUrl) {\n    return;\n  }\n\n  if (backgroundImageUrl) {\n    await saveImageToPathAsync(\n      projectRoot,\n      backgroundImageUrl,\n      backgroundImageOutputPath\n    );\n  }\n}\n\nfunction setBackgroundColor(manifest, dom) {\n  let backgroundViewID = 'OfY-5Y-tS4';\n  var backgroundColorString;\n  if (\n    manifest.loading &&\n    manifest.loading.splash &&\n    manifest.loading.splash.backgroundColor\n  ) {\n    backgroundColorString = manifest.loading.splash.backgroundColor;\n  }\n\n  if (!backgroundColorString) {\n    backgroundColorString = manifest.loading.backgroundColor;\n  }\n\n  const { r, g, b } = backgroundColorFromHexString(backgroundColorString);\n  var backgroundViewNode = dom.getElementById(backgroundViewID);\n  var backgroundViewColorNodes = backgroundViewNode.getElementsByTagName(\n    'color'\n  );\n  var backgroundColorNode;\n  for (var i = 0; i < backgroundViewColorNodes.length; i++) {\n    var node = backgroundViewColorNodes[i];\n    if (node.parentNode.getAttribute('id') !== backgroundViewID) {\n      continue;\n    }\n\n    if (node.getAttribute('key') === 'backgroundColor') {\n      backgroundColorNode = node;\n      break;\n    }\n  }\n\n  if (backgroundColorNode) {\n    backgroundColorNode.setAttribute('red', r);\n    backgroundColorNode.setAttribute('green', g);\n    backgroundColorNode.setAttribute('blue', b);\n  }\n}\n\n/**\n * Based on keys in the given manifest,\n * ensure that the proper iOS icon images exist -- assuming Info.plist already\n * points at them under CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconFiles.\n *\n * This only works on MacOS (as far as I know) because it uses the sips utility.\n */\nasync function configureIOSIconsAsync(\n  manifest,\n  destinationIconPath,\n  projectRoot\n) {\n  if (process.platform !== 'darwin') {\n    console.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let defaultIconFilename;\n  if (manifest.ios && manifest.ios.iconUrl) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveUrlToPathAsync(\n      manifest.ios.iconUrl,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  } else if (manifest.iconUrl) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveUrlToPathAsync(\n      manifest.iconUrl,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  } else if (projectRoot && manifest.icon) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveImageToPathAsync(\n      projectRoot,\n      manifest.icon,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  }\n\n  let iconSizes = [20, 29, 40, 60, 76, 83.5];\n  iconSizes.forEach(iconSize => {\n    let iconResolutions;\n    if (iconSize === 76) {\n      // iPad has 1x and 2x icons for this size only\n      iconResolutions = [1, 2];\n    } else {\n      iconResolutions = [2, 3];\n    }\n    iconResolutions.forEach(async iconResolution => {\n      let iconQualifier = getAppleIconQualifier(iconSize, iconResolution);\n      // TODO(nikki): Support local paths for these icons\n      let iconKey = `iconUrl${iconQualifier}`;\n      let rawIconFilename;\n      let usesDefault = false;\n      if (manifest.ios && manifest.ios.hasOwnProperty(iconKey)) {\n        // manifest specifies an image just for this size/resolution, use that\n        rawIconFilename = `exp-icon${iconQualifier}.png`;\n        await saveUrlToPathAsync(\n          manifest.ios[iconKey],\n          `${destinationIconPath}/${rawIconFilename}`\n        );\n      } else {\n        // use default manifest.iconUrl\n        usesDefault = true;\n        if (defaultIconFilename) {\n          rawIconFilename = defaultIconFilename;\n        } else {\n          console.warn(\n            `Manifest does not specify ios.${iconKey} nor a default iconUrl. Bundle will use the Expo logo.`\n          );\n          return;\n        }\n      }\n\n      let iconFilename = `AppIcon${iconQualifier}.png`;\n      let iconSizePx = iconSize * iconResolution;\n      await spawnAsyncThrowError('/bin/cp', [rawIconFilename, iconFilename], {\n        stdio: 'inherit',\n        cwd: destinationIconPath,\n      });\n      await spawnAsyncThrowError('sips', ['-Z', iconSizePx, iconFilename], {\n        stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n        cwd: destinationIconPath,\n      });\n\n      // reject non-square icons (because Apple will if we don't)\n      const dims = await getImageDimensionsAsync(\n        destinationIconPath,\n        iconFilename\n      );\n      if (!dims || dims.length < 2 || dims[0] !== dims[1]) {\n        throw new Error(\n          `iOS icons must be square, the dimensions of ${iconFilename} are ${dims}`\n        );\n      }\n\n      if (!usesDefault) {\n        // non-default icon used, clean up the downloaded version\n        await spawnAsyncThrowError('/bin/rm', [\n          path.join(destinationIconPath, rawIconFilename),\n        ]);\n      }\n    });\n  });\n\n  // clean up default icon\n  if (defaultIconFilename) {\n    await spawnAsyncThrowError('/bin/rm', [\n      path.join(destinationIconPath, defaultIconFilename),\n    ]);\n  }\n  return;\n}\n\nexport {\n  parseSdkMajorVersion,\n  saveUrlToPathAsync,\n  saveImageToPathAsync,\n  getManifestAsync,\n  getImageDimensionsAsync,\n  spawnAsyncThrowError,\n  spawnAsync,\n  transformFileContentsAsync,\n  modifyIOSPropertyListAsync,\n  cleanIOSPropertyListBackupAsync,\n  configureIOSIconsAsync,\n  configureIOSLaunchAssetsAsync,\n  createBlankIOSPropertyListAsync,\n};\n"],"sourceRoot":"/xdl/src"}