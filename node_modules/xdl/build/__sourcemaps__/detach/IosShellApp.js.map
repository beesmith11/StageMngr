{"version":3,"sources":["detach/IosShellApp.js"],"names":["async","args","iosDir","privateConfigFile","spawnAsyncThrowError","path","join","configureShellAppSecretsAsync","entitlementsFilePath","buildConfiguration","manifest","result","modifyIOSPropertyListAsync","config","let","iCloudKeys","forEach","key","hasOwnProperty","ios","associatedDomains","merchantId","configureStandaloneIOSEntitlementsAsync","configFilePath","privateConfig","bundleIdentifier","await","infoPlist","extraConfig","CFBundleIdentifier","Error","CFBundleName","name","linkingSchemes","scheme","facebookScheme","startsWith","push","googleSignIn","reservedClientId","CFBundleURLTypes","CFBundleURLSchemes","CFBundleURLName","usesNonExemptEncryption","ITSAppUsesNonExemptEncryption","googleMapsApiKey","GMSApiKey","EXClientVersion","CFBundleVersion","version","buildNumber","CFBundleShortVersionString","Fabric","APIKey","fabric","apiKey","DEFAULT_FABRIC_KEY","Kits","KitInfo","KitName","branch","branch_key","live","permissionsAppName","indexOf","replace","UIDeviceFamily","supportsTablet","isTabletOnly","configureStandaloneIOSInfoPlistAsync","manifestUrl","shellConfig","isShell","permissions","isDetached","isManifestVerificationBypassed","isRemoteJSEnabled","console","log","configureStandaloneIOSShellPlistAsync","validateConfigArguments","privateConfigContents","fs","promise","readFile","JSON","parse","url","configuration","UILaunchStoryboardName","configurePropertyListsAsync","bundleUrl","writeFile","stringify","saveUrlToPathAsync","preloadManifestAndBundleAsync","restoreOriginals","cleanIOSPropertyListBackupAsync","cleanPropertyListBackupsAsync","iOSRootPath","relativeBuildDestination","action","verbose","type","buildCmd","buildDest","pathToApp","stdio","cwd","shell","artifactLocation","buildAsync","validateArgs","sdkVersion","output","getManifestAsync","archivePath","configureIOSIconsAsync","configureIOSLaunchAssetsAsync","archiveName","spawnAsync","createIOSShellAppAsync","cmdArgs","bundleIdentifierFromManifest","warn"],"mappings":"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","file":"../../detach/IosShellApp.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport 'instapromise';\n\nimport fs from 'fs';\nimport path from 'path';\nimport {\n  getManifestAsync,\n  saveUrlToPathAsync,\n  spawnAsync,\n  spawnAsyncThrowError,\n  modifyIOSPropertyListAsync,\n  cleanIOSPropertyListBackupAsync,\n  configureIOSIconsAsync,\n  configureIOSLaunchAssetsAsync,\n} from './ExponentTools';\n\n// TODO: move this somewhere else. this is duplicated in universe/exponent/template-files/keys,\n// but xdl doesn't have access to that.\nconst DEFAULT_FABRIC_KEY = '81130e95ea13cd7ed9a4f455e96214902c721c99';\n\nfunction validateConfigArguments(manifest, cmdArgs, configFilePath) {\n  if (!configFilePath) {\n    throw new Error('No path to config files provided');\n  }\n  let bundleIdentifierFromManifest = manifest.ios\n    ? manifest.ios.bundleIdentifier\n    : null;\n  if (!bundleIdentifierFromManifest && !cmdArgs.bundleIdentifier) {\n    throw new Error(\n      'No bundle identifier found in either the manifest or argv'\n    );\n  }\n  if (!manifest.name) {\n    throw new Error('Manifest does not have a name');\n  }\n\n  if (!cmdArgs.privateConfigFile) {\n    console.warn('Warning: No config file specified.');\n  }\n  return true;\n}\n\n/**\n * Writes Fabric config to private-shell-app-config.json if necessary. Used by\n * generate-dynamic-macros when building.\n */\nasync function configureShellAppSecretsAsync(args, iosDir) {\n  if (!args.privateConfigFile) {\n    return;\n  }\n\n  spawnAsyncThrowError('/bin/cp', [\n    args.privateConfigFile,\n    path.join(iosDir, 'private-shell-app-config.json'),\n  ]);\n}\n\n/**\n * Configure a standalone entitlements file.\n * @param entitlementsFilePath Path to directory containing entitlements file\n * @param buildConfiguration Debug or Release\n * @param manifest The app manifest\n */\nasync function configureStandaloneIOSEntitlementsAsync(\n  entitlementsFilePath,\n  buildConfiguration,\n  manifest\n) {\n  const result = modifyIOSPropertyListAsync(\n    entitlementsFilePath,\n    'Exponent.entitlements',\n    config => {\n      // push notif entitlement changes based on build configuration\n      config['aps-environment'] =\n        buildConfiguration === 'Release' ? 'production' : 'development';\n\n      // remove iCloud-specific entitlements and allow the developer to configure\n      // this themselves.\n      let iCloudKeys = [\n        'com.apple.developer.icloud-container-identifiers',\n        'com.apple.developer.icloud-services',\n        'com.apple.developer.ubiquity-container-identifiers',\n        'com.apple.developer.ubiquity-kvstore-identifier',\n      ];\n      iCloudKeys.forEach(key => {\n        if (config.hasOwnProperty(key)) {\n          delete config[key];\n        }\n      });\n\n      // Add app associated domains remove exp-specific ones.\n      if (manifest.ios && manifest.ios.associatedDomains) {\n        config['com.apple.developer.associated-domains'] =\n          manifest.ios.associatedDomains;\n      } else if (\n        config.hasOwnProperty('com.apple.developer.associated-domains')\n      ) {\n        delete config['com.apple.developer.associated-domains'];\n      }\n\n      // Add Apple Pay Merchant ID or remove Merchant ID if unused.\n      if (manifest.ios && manifest.ios.merchantId) {\n        config['com.apple.developer.in-app-payments'] = manifest.ios.merchantId;\n      } else {\n        delete config['com.apple.developer.in-app-payments'];\n      }\n\n      return config;\n    }\n  );\n  return result;\n}\n\n/**\n * Configure an iOS Info.plist for a standalone app given its exponent configuration.\n * @param configFilePath Path to directory containing Info.plist\n * @param manifest the app's manifest\n * @param privateConfig optional config with the app's private keys\n * @param bundleIdentifier optional bundle id if the manifest doesn't contain one already\n */\nasync function configureStandaloneIOSInfoPlistAsync(\n  configFilePath,\n  manifest,\n  privateConfig = null,\n  bundleIdentifier = null\n) {\n  let result = await modifyIOSPropertyListAsync(\n    configFilePath,\n    'Info',\n    config => {\n      // make sure this happens first:\n      // apply any custom information from ios.infoPlist prior to all other exponent config\n      if (manifest.ios && manifest.ios.infoPlist) {\n        let extraConfig = manifest.ios.infoPlist;\n        for (let key in extraConfig) {\n          if (extraConfig.hasOwnProperty(key)) {\n            config[key] = extraConfig[key];\n          }\n        }\n      }\n\n      // bundle id\n      config.CFBundleIdentifier =\n        manifest.ios && manifest.ios.bundleIdentifier\n          ? manifest.ios.bundleIdentifier\n          : bundleIdentifier;\n      if (!config.CFBundleIdentifier) {\n        throw new Error(\n          `Cannot configure an iOS app with no bundle identifier.`\n        );\n      }\n\n      // app name\n      config.CFBundleName = manifest.name;\n\n      // determine app linking schemes\n      let linkingSchemes = manifest.scheme ? [manifest.scheme] : [];\n      if (manifest.facebookScheme && manifest.facebookScheme.startsWith('fb')) {\n        linkingSchemes.push(manifest.facebookScheme);\n      }\n      if (\n        privateConfig &&\n        privateConfig.googleSignIn &&\n        privateConfig.googleSignIn.reservedClientId\n      ) {\n        linkingSchemes.push(privateConfig.googleSignIn.reservedClientId);\n      }\n\n      // remove exp scheme, add app scheme(s)\n      config.CFBundleURLTypes = [\n        {\n          CFBundleURLSchemes: linkingSchemes,\n        },\n        {\n          // Add the generic oauth redirect, it's important that it has the name\n          // 'OAuthRedirect' so we can find it in app code.\n          CFBundleURLName: 'OAuthRedirect',\n          CFBundleURLSchemes: [config.CFBundleIdentifier],\n        },\n      ];\n\n      // set ITSAppUsesNonExemptEncryption to let people skip manually\n      // entering it in iTunes Connect\n      if (\n        privateConfig &&\n        privateConfig.hasOwnProperty('usesNonExemptEncryption') &&\n        privateConfig.usesNonExemptEncryption === false\n      ) {\n        config.ITSAppUsesNonExemptEncryption = false;\n      }\n\n      // google maps api key\n      if (privateConfig && privateConfig.googleMapsApiKey) {\n        config.GMSApiKey = privateConfig.googleMapsApiKey;\n      }\n\n      // permanently save the exponent client version at time of configuration\n      config.EXClientVersion = config.CFBundleVersion;\n\n      // use version from manifest\n      let version = manifest.version ? manifest.version : '0.0.0';\n      let buildNumber =\n        manifest.ios && manifest.ios.buildNumber\n          ? manifest.ios.buildNumber\n          : '1';\n      config.CFBundleShortVersionString = version;\n      config.CFBundleVersion = buildNumber;\n\n      config.Fabric = {\n        APIKey:\n          (privateConfig &&\n            privateConfig.fabric &&\n            privateConfig.fabric.apiKey) ||\n          DEFAULT_FABRIC_KEY,\n        Kits: [\n          {\n            KitInfo: {},\n            KitName: 'Crashlytics',\n          },\n        ],\n      };\n\n      if (privateConfig && privateConfig.branch) {\n        config.branch_key = {\n          live: privateConfig.branch.apiKey,\n        };\n      }\n\n      let permissionsAppName = manifest.name ? manifest.name : 'this app';\n      for (let key in config) {\n        if (\n          config.hasOwnProperty(key) &&\n          key.indexOf('UsageDescription') !== -1\n        ) {\n          config[key] = config[key].replace(\n            'Expo experiences',\n            permissionsAppName\n          );\n        }\n      }\n\n      // 1 is iPhone, 2 is iPad\n      config.UIDeviceFamily =\n        manifest.ios && manifest.ios.supportsTablet ? [1, 2] : [1];\n\n      // allow iPad-only\n      if (manifest.ios && manifest.ios.isTabletOnly) {\n        config.UIDeviceFamily = [2];\n      }\n\n      return config;\n    }\n  );\n  return result;\n}\n\n/**\n * Configure EXShell.plist for a standalone app given its exponent configuration.\n * @param configFilePath Path to Info.plist\n * @param manifest the app's manifest\n * @param manifestUrl the app's manifest url\n */\nasync function configureStandaloneIOSShellPlistAsync(\n  configFilePath,\n  manifest,\n  manifestUrl\n) {\n  await modifyIOSPropertyListAsync(configFilePath, 'EXShell', shellConfig => {\n    shellConfig.isShell = true;\n    shellConfig.manifestUrl = manifestUrl;\n    if (manifest.ios && manifest.ios.permissions) {\n      shellConfig.permissions = manifest.ios.permissions;\n    }\n    if (manifest.isDetached) {\n      // disable manifest verification on detached apps until\n      // the developer adds the correct entitlements to their bundle id.\n      shellConfig.isManifestVerificationBypassed = true;\n    }\n    if (manifest.ios && manifest.ios.hasOwnProperty('isRemoteJSEnabled')) {\n      // enable/disable code push if the developer provided specific behavior\n      shellConfig.isRemoteJSEnabled = manifest.ios.isRemoteJSEnabled;\n    }\n\n    console.log('Using shell config:', shellConfig);\n    return shellConfig;\n  });\n}\n\nasync function configurePropertyListsAsync(manifest, args, configFilePath) {\n  // make sure we have all the required info\n  validateConfigArguments(manifest, args, configFilePath);\n  console.log(`Modifying config files under ${configFilePath}...`);\n\n  let { privateConfigFile } = args;\n\n  let privateConfig;\n  if (privateConfigFile) {\n    let privateConfigContents = await fs.promise.readFile(\n      privateConfigFile,\n      'utf8'\n    );\n    privateConfig = JSON.parse(privateConfigContents);\n  }\n\n  // generate new shell config\n  await configureStandaloneIOSShellPlistAsync(\n    configFilePath,\n    manifest,\n    args.url\n  );\n\n  // entitlements changes\n  await configureStandaloneIOSEntitlementsAsync(\n    configFilePath,\n    args.configuration,\n    manifest\n  );\n\n  // Info.plist changes specific to turtle\n  await modifyIOSPropertyListAsync(configFilePath, 'Info', config => {\n    // use shell-specific launch screen\n    config.UILaunchStoryboardName = 'LaunchScreenShell';\n    return config;\n  });\n\n  // common standalone Info.plist config changes\n  await configureStandaloneIOSInfoPlistAsync(\n    configFilePath,\n    manifest,\n    privateConfig,\n    args.bundleIdentifier\n  );\n}\n\n/**\n * Write the manifest and JS bundle to the iOS NSBundle.\n */\nasync function preloadManifestAndBundleAsync(manifest, args, configFilePath) {\n  let bundleUrl = manifest.bundleUrl;\n  await fs.promise.writeFile(\n    `${configFilePath}/shell-app-manifest.json`,\n    JSON.stringify(manifest)\n  );\n  await saveUrlToPathAsync(bundleUrl, `${configFilePath}/shell-app.bundle`);\n  return;\n}\n\nasync function cleanPropertyListBackupsAsync(configFilePath, restoreOriginals) {\n  console.log('Cleaning up...');\n  await cleanIOSPropertyListBackupAsync(\n    configFilePath,\n    'EXShell',\n    restoreOriginals\n  );\n  await cleanIOSPropertyListBackupAsync(\n    configFilePath,\n    'Exponent.entitlements',\n    restoreOriginals\n  );\n  await cleanIOSPropertyListBackupAsync(\n    configFilePath,\n    'Info',\n    restoreOriginals\n  );\n}\n\n/**\n *  Build the iOS binary from source.\n *  @return the path to the resulting .app\n */\nasync function buildAsync(args, iOSRootPath, relativeBuildDestination) {\n  let { action, configuration, verbose, type } = args;\n\n  let buildCmd, buildDest, pathToApp;\n  if (type === 'simulator') {\n    buildDest = `${iOSRootPath}/${relativeBuildDestination}-simulator`;\n    buildCmd = `xcodebuild -workspace Exponent.xcworkspace -scheme Exponent -sdk iphonesimulator -configuration ${configuration} -derivedDataPath ${buildDest} CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO SKIP_INSTALL=NO ARCHS=\"i386 x86_64\" ONLY_ACTIVE_ARCH=NO | xcpretty`;\n    pathToApp = `${buildDest}/Build/Products/${configuration}-iphonesimulator/Exponent.app`;\n  } else if (type === 'archive') {\n    buildDest = `${iOSRootPath}/${relativeBuildDestination}-archive`;\n    buildCmd = `xcodebuild -workspace Exponent.xcworkspace -scheme Exponent archive -configuration ${configuration} -derivedDataPath ${buildDest} -archivePath ${buildDest}/Exponent.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO SKIP_INSTALL=NO | xcpretty`;\n    pathToApp = `${buildDest}/Exponent.xcarchive/Products/Applications/Exponent.app`;\n  }\n\n  if (buildCmd) {\n    console.log(\n      `Building shell app under ${iOSRootPath}/${relativeBuildDestination}`\n    );\n    console.log(`  (action: ${action}, configuration: ${configuration})...`);\n    console.log(buildCmd);\n    await spawnAsyncThrowError(buildCmd, null, {\n      // only stderr\n      stdio: verbose ? 'inherit' : ['ignore', 'ignore', 'inherit'],\n      cwd: iOSRootPath,\n      shell: true,\n    });\n\n    let artifactLocation = `${iOSRootPath}/../shellAppBase-builds/${type}/${configuration}/`;\n    await spawnAsyncThrowError('/bin/rm', ['-rf', artifactLocation]);\n    await spawnAsyncThrowError('/bin/mkdir', ['-p', artifactLocation]);\n\n    if (type === 'archive') {\n      await spawnAsyncThrowError('/bin/cp', [\n        '-R',\n        `${buildDest}/Exponent.xcarchive`,\n        artifactLocation,\n      ]);\n    } else if (type === 'simulator') {\n      await spawnAsyncThrowError('/bin/cp', [\n        '-R',\n        pathToApp,\n        artifactLocation,\n      ]);\n    }\n  }\n  return pathToApp;\n}\n\nfunction validateArgs(args) {\n  args.type = args.type || 'archive';\n  args.configuration = args.configuration || 'Release';\n  args.verbose = args.verbose || false;\n\n  switch (args.type) {\n    case 'simulator': {\n      if (args.configuration !== 'Debug' && args.configuration !== 'Release') {\n        throw new Error(\n          `Unsupported build configuration ${args.configuration}`\n        );\n      }\n      break;\n    }\n    case 'archive': {\n      if (args.configuration !== 'Release') {\n        throw new Error(\n          'Release is the only supported configuration when archiving'\n        );\n      }\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported build type ${args.type}`);\n    }\n  }\n\n  switch (args.action) {\n    case 'configure': {\n      if (!args.url) {\n        throw new Error('Must run with `--url MANIFEST_URL`');\n      }\n      if (!args.sdkVersion) {\n        throw new Error('Must run with `--sdkVersion SDK_VERSION`');\n      }\n      if (!args.archivePath) {\n        throw new Error(\n          'Need to provide --archivePath <path to existing archive for configuration>'\n        );\n      }\n      break;\n    }\n    case 'build': {\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported build action ${args.action}`);\n    }\n  }\n\n  return args;\n}\n\n/**\n*  @param url manifest url for shell experience\n*  @param sdkVersion sdk to use when requesting the manifest\n*  @param action\n*    build - build a binary\n*    configure - don't build anything, just configure the files in an existing .app bundle\n*  @param type simulator or archive, for action == build\n*  @param configuration Debug or Release, for type == simulator (default Release)\n*  @param archivePath path to existing bundle, for action == configure\n*  @param privateConfigFile path to a private config file containing, e.g., private api keys\n*  @param bundleIdentifier iOS CFBundleIdentifier to use in the bundle config\n*  @param verbose show all xcodebuild output (default false)\n*  @param output specify the output path of built project (ie) /tmp/my-app-archive-build.xcarchive or /tmp/my-app-ios-build.tar.gz\n*/\nasync function createIOSShellAppAsync(args) {\n  let configFilePath;\n  args = validateArgs(args);\n\n  if (args.action !== 'configure') {\n    // build the app before configuring\n    await configureShellAppSecretsAsync(args, '../ios');\n    configFilePath = await buildAsync(args, '../ios', '../shellAppBase');\n  } else {\n    let { url, sdkVersion, output, type } = args;\n\n    // fetch manifest\n    let manifest = await getManifestAsync(url, {\n      'Exponent-SDK-Version': sdkVersion,\n      'Exponent-Platform': 'ios',\n    });\n\n    // action === 'configure'\n    configFilePath = args.archivePath;\n    // just configure, don't build anything\n    await configurePropertyListsAsync(manifest, args, configFilePath);\n    await configureIOSIconsAsync(manifest, configFilePath);\n    await configureIOSLaunchAssetsAsync(manifest, configFilePath, '../ios');\n    await preloadManifestAndBundleAsync(manifest, args, configFilePath);\n    await cleanPropertyListBackupsAsync(configFilePath, false);\n\n    let archiveName = manifest.name.replace(/\\s+/g, '');\n    if (type === 'simulator') {\n      await spawnAsync(\n        `mv Exponent.app ${archiveName}.app && tar -czvf ${output} ${archiveName}.app`,\n        null,\n        {\n          stdio: 'inherit',\n          cwd: `${configFilePath}/..`,\n          shell: true,\n        }\n      );\n    } else if (type === 'archive') {\n      await spawnAsync('/bin/mv', ['Exponent.xcarchive', output], {\n        stdio: 'inherit',\n        cwd: `${configFilePath}/../../../..`,\n      });\n    }\n  }\n\n  return;\n}\n\nexport {\n  createIOSShellAppAsync,\n  configureStandaloneIOSInfoPlistAsync,\n  configureStandaloneIOSShellPlistAsync,\n};\n"],"sourceRoot":"/xdl/src"}